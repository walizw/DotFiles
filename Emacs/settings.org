* Emacs Settings

These are my emacs settings, they are mainly for python development, I try to
keep everything as minimalistic as possible, but there are some other things I
literally just have installed to flex and things like that hehehe. I hope you
like my configs :3

** Installing packages

Let's first add melpa and install all packages:

#+BEGIN_SRC emacs-lisp
    (package-initialize)
    (add-to-list 'package-archives
		 '("melpa" . "https://melpa.org/packages/"))
#+END_SRC

I will also define an =install-if-needed= function. It will basically install a
package that hasn't been installed yet:

#+BEGIN_SRC emacs-lisp
  (defun install-if-needed (package)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

I will also define a =my-packages= variable, containing all the packages that
I will be using:

#+BEGIN_SRC emacs-lisp
  (setq my-packages
	'(
	  ;; Useful packages
	  company ; for autocompletion
	  company-jedi ; python autocompletion
	  rainbow-delimiters ; sets colours to parenthesis
	  smartparens ; smart parenthesis
	  yasnippet ; snippets :p
	  yasnippet-snippets

	  ;; Python-specific
	  jedi
	  pytest

	  ;; C-specific
	  lsp-mode
	  lsp-treemacs
	  helm-lsp

	  ;; HTML-specific
	  emmet-mode

	  ;; ORG specific
	  org-bullets

	  ;; Other
	  all-the-icons
	  treemacs
	  treemacs-all-the-icons
	  visual-fill-column
	  helm
	  ))
#+END_SRC

And finally, we will call =install-if-needed= passing the contents of
=my-packages=:

#+BEGIN_SRC emacs-lisp
  (mapc 'install-if-needed my-packages)
#+END_SRC

** Auto-completion

Let's get started by setting up company and enabling it:

#+BEGIN_SRC emacs-lisp
  (global-company-mode t)

  ;; Python company
  (require 'company-jedi)
#+END_SRC

** Snippets

Let's load yasnippet:

#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC

** Language specific settings

*** Python

*NOTE:* Don't forget to install =jedi= using =pip=.

I will just change some parameters for jedi:

#+BEGIN_SRC emacs-lisp
  (setq
   jedi:complete-on-dot t
   jedi:setup-keys t
   py-electric-colon-active t
   py-smart-indentation t)
#+END_SRC

And add a hook to it:

#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
	    (lambda ()
	      (add-to-list 'company-backends 'company-jedi)
	      (hack-local-variables)
	      (jedi:setup)
	      (local-set-key "\C-cd" 'jedi:show-doc)
	      (local-set-key (kbd "M-.") 'jedi:goto-definition)
	      (local-set-key (kbd "M-D") 'ca-python-remove-pdb)
	      (local-set-key [f6] 'pytest-module)))
#+END_SRC

*** C

#+BEGIN_SRC emacs-lisp
  (require 'lsp-mode)
  (add-hook 'c-mode-hook 'lsp)

  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        treemacs-space-between-root-nodes nil
        company-idle-delay 0.0
        company-minimum-prefix-length 1
        lsp-idle-delay 0.1)  ;; clangd is fast

  (with-eval-after-load 'lsp-mode
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
    (yas-global-mode))

  (defun format-c-after-save ()
    (when (eq major-mode 'c-mode)
      (lsp-format-buffer)))

  (add-hook 'after-save-hook 'format-c-after-save)
#+END_SRC

*** HTML

Let's setup emmet mode:

#+BEGIN_SRC emacs-lisp
  (require 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
#+END_SRC

*** Org

Let's set up our org-mode:

#+BEGIN_SRC emacs-lisp
  (defun org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode)
    (visual-line-mode 1))

  (require 'org)
  (require 'org-bullets)

  (setq org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))

  (add-hook 'org-mode-hook
            (lambda ()
              (org-mode-setup)
              (org-bullets-mode)))
#+END_SRC

Let's also center our org buffers:

#+BEGIN_SRC emacs-lisp
  (require 'visual-fill-column)
  (add-hook 'org-mode-hook
            (lambda ()
              (setq visual-fill-column-width 100
                    visual-fill-column-center-text t)
              (visual-fill-column-mode 1)))
#+END_SRC

**** Babel

Let's first setup babel with the languages I use the most:

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . nil)
     (python . t)
     (C . t)))
#+END_SRC

** Other stuff

*** Font

Let's also set the =Fira Code= and =Cantarel= fonts:

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 100)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 100)
  (set-face-attribute 'variable-pitch nil :font "Fira Code Retina" :height 100 :weight 'regular)
#+END_SRC

*** Displays

Let's add =rainbow-delimiters-mode= to the =prog-mode-hook=:

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

Let's also enable the =smartparens=, this is basically parenthesis autocomplete
and several other stuff:

#+BEGIN_SRC emacs-lisp
  (smartparens-global-mode t)
  (show-paren-mode t)
#+END_SRC

Enable which-function:

#+BEGIN_SRC emacs-lisp
  (which-function-mode t)
#+END_SRC

*** Treemacs

Let's load and enable treemacs:

#+BEGIN_SRC emacs-lisp
  (require 'treemacs)
  (global-set-key (kbd "<f8>") #'treemacs)
#+END_SRC

*** Helm

Let's load and enable helm:

#+BEGIN_SRC emacs-lisp
  (helm-mode)
  (define-key global-map [remap find-file] #'helm-find-files)
  (define-key global-map [remap execute-extended-command] #'helm-M-x)
  (define-key global-map [remap switch-to-buffer] #'helm-mini)
#+END_SRC

*** Tweaking the UI

Let's modify some things of the emacs UI:

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  ;; (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)

  (menu-bar-mode -1)

  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq create-lockfiles nil)
#+END_SRC

*** All the icons

To display pretty icons (only when using the GTK UI):

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (require 'all-the-icons))
#+END_SRC

*NOTE:* If it's the first time running, don't forget to execute
=M-x all-the-icons-install-fonts= and =fc-cache -f -v=.

**** Treemacs

Of course we want to use =all-the-icons= in the treemacs buffer, so let's load
the =all-the-icons= theme for treemacs:

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (require 'treemacs-all-the-icons)
    (treemacs-load-theme "all-the-icons"))
#+END_SRC
